__BRYTHON__.use_VFS = true;
var scripts = {"$timestamp": 1692969211383, "setup": [".py", "from setuptools import setup,find_packages\n\nsetup(\nname='tia-openness-api-client',\nversion='0.1.0',\nauthor='Jasper Delahaije',\nauthor_email='jdelahaije@gmail.com',\ndescription='A Python library used to create a client for accessing the TIA Openness API',\nlong_description=open('README.md','r',encoding='utf-8').read(),\nlong_description_content_type='text/markdown',\nurl='https://github.com/Repsay/tia-openness-api-client',\npackages=find_packages(),\ninstall_requires=['pythonnet'],\nclassifiers=[\n'Development Status :: 3 - Alpha',\n'Intended Audience :: Developers',\n'License :: OSI Approved :: MIT License',\n'Programming Language :: Python :: 3.11'\n],\npython_requires='>=3.11',\n)\n", ["setuptools"]], "tia_portal.config": [".py", "''\n\n\n\n\n\n\n\nimport configparser\nimport os\n\nfrom tia_portal.version import TiaVersion\n\nDATA_PATH=os.path.join(os.path.expanduser(\"~\"),\".tia_portal\")\nCONFIG_PATH=os.path.join(DATA_PATH,\"config.ini\")\nVERSION=TiaVersion.V15_1\n\n\ndef load()->None :\n ''\n config=configparser.ConfigParser()\n \n if not os.path.exists(DATA_PATH):\n  os.makedirs(DATA_PATH)\n  \n if not os.path.exists(CONFIG_PATH):\n  config[\"DEFAULT\"]={\n  \"version\":\"V17\",\n  }\n  config[\"USER\"]={}\n  config.write(open(CONFIG_PATH,\"w\",encoding=\"utf-8\"))\n  \n config.read(CONFIG_PATH)\n global VERSION\n VERSION=(\n TiaVersion[config[\"DEFAULT\"][\"version\"]]\n if config[\"USER\"].get(\"version\")is None\n else TiaVersion[config[\"USER\"][\"version\"]]\n )\n \n \ndef set_version(version:TiaVersion)->None :\n ''\n\n\n\n \n config=configparser.ConfigParser()\n config.read(CONFIG_PATH)\n \n config[\"USER\"][\"version\"]=version.name\n with open(CONFIG_PATH,\"w\",encoding=\"utf-8\")as configfile:\n  config.write(configfile)\n", ["configparser", "os", "tia_portal.version"]], "tia_portal.exceptions": [".py", "''\n\n\nclass LibraryImportError(Exception):\n pass\n \n \nclass LibraryDLLNotFound(Exception):\n pass\n \n \nclass InvalidTIASession(Exception):\n pass\n \n \nclass ProjectAlreadyExists(Exception):\n pass\n \n \nclass ProjectNotFound(Exception):\n pass\n \n \nclass InvalidProject(Exception):\n pass\n \n \nclass InvalidDeviceComposition(Exception):\n pass\n \n \nclass InvalidDevice(Exception):\n pass\n \n \nclass InvalidDeviceItemComposition(Exception):\n pass\n \n \nclass InvalidDeviceItem(Exception):\n pass\n \n \nclass DeviceAlreadyExists(Exception):\n pass\n \n \nclass InvalidSoftwareType(Exception):\n pass\n \n \nclass InvalidSoftware(Exception):\n pass\n \n \nclass InvalidSystemBlockGroupComposition(Exception):\n pass\n \n \nclass InvalidSystemBlockGroup(Exception):\n pass\n \n \nclass InvalidUserBlockGroupComposition(Exception):\n pass\n \n \nclass InvalidUserBlockGroup(Exception):\n pass\n \n \nclass InvalidBlockComposition(Exception):\n pass\n \n \nclass InvalidBlockType(Exception):\n pass\n \n \nclass InvalidBlock(Exception):\n pass\n \n \nclass InvalidGlobalLibraryComposition(Exception):\n pass\n \n \nclass InvalidGlobalLibrary(Exception):\n pass\n \n \nclass InvalidTypeFolder(Exception):\n pass\n \n \nclass InvalidTypeUserFolderComposition(Exception):\n pass\n \n \nclass InvalidUserTypeFolder(Exception):\n pass\n \n \nclass InvalidTypeUserFolder(Exception):\n pass\n \n \nclass InvalidTypeComposition(Exception):\n pass\n \n \nclass InvalidMasterCopyFolder(Exception):\n pass\n \n \nclass InvalidMasterCopyUserFolderComposition(Exception):\n pass\n \n \nclass InvalidUserMasterCopyFolder(Exception):\n pass\n \n \nclass InvalidMasterCopyComposition(Exception):\n pass\n \n \nclass InvalidMasterCopy(Exception):\n pass\n \n \nclass InvalidPath(Exception):\n pass\n \n \nclass TIALibraryNotFound(Exception):\n pass\n \n \nclass TIAProjectNotFound(Exception):\n pass\n \n \nclass TIAProjectAlreadyExists(Exception):\n pass\n \n \nclass TIAInvalidProject(Exception):\n pass\n \n \nclass TIAProjectAlreadyOpen(Exception):\n pass\n \n \nclass TIAInvalidSession(Exception):\n pass\n \n \nclass TIADeviceNotFound(Exception):\n pass\n \n \nclass TIADeviceAlreadyExists(Exception):\n pass\n \n \nclass TIADeviceItemNotFound(Exception):\n pass\n \n \nclass TIAGroupNotFound(Exception):\n pass\n \n \nclass TIAInvalidProperty(Exception):\n pass\n \n \nclass TIABlockNotFound(Exception):\n pass\n \n \nclass TIAInconsistentBlock(Exception):\n pass\n \n \nclass TIAGlobalLibraryNotFound(Exception):\n pass\n", []], "tia_portal.version": [".py", "''\n\nfrom __future__ import annotations\nfrom enum import Enum\n\n\nclass TiaVersion(Enum):\n ''\n\n\n\n\n\n\n \n \n V15=\"15\"\n V15_1=\"15_1\"\n V16=\"16\"\n V17=\"17\"\n", ["__future__", "enum"]], "tia_portal": [".py", "''\n\nfrom __future__ import annotations\n\nimport os\nimport re\nimport shutil\nfrom typing import Any,Iterator,Optional,Union\n\nimport clr\n\nimport tia_portal.config as cfg\nimport tia_portal.exceptions as tia_e\nfrom tia_portal.protocol.composition import Composition,CompositionItem\nfrom tia_portal.protocol.objects import TiaObject\nfrom tia_portal.version import TiaVersion\n\ncfg.load()\n\nfrom System.Diagnostics import Process\nfrom System.IO import DirectoryInfo,FileInfo\n\ndll_path=(\nf\"C:\\\\Program Files\\\\Siemens\\\\Automation\\\\\"\nf\"Portal {cfg.VERSION.name}\\\\PublicAPI\\\\V{cfg.VERSION.value.replace('_', '.')}\"\n\"\\\\Siemens.Engineering.dll\"\n)\n\nif not os.path.exists(dll_path):\n raise tia_e.LibraryDLLNotFound(f\"Could not find {dll_path}\")\n \ntry :\n clr.AddReference(dll_path)\nexcept Exception as e:\n raise tia_e.LibraryImportError(f\"Could not load {dll_path}\")from e\n \ntry :\n import Siemens.Engineering as tia\nexcept Exception as e:\n raise tia_e.LibraryImportError(\"Could not import Siemens.Engineering\")from e\n \ntry :\n import Siemens.Engineering.Compiler as comp\nexcept Exception as e:\n raise tia_e.LibraryImportError(\n \"Could not import Siemens.Engineering.Compiler\"\n )from e\n \ntry :\n import Siemens.Engineering.HW as hw\nexcept Exception as e:\n raise tia_e.LibraryImportError(\"Could not import Siemens.Engineering.HW\")from e\n \ntry :\n import Siemens.Engineering.HW.Features as hwf\nexcept Exception as e:\n raise tia_e.LibraryImportError(\n \"Could not import Siemens.Engineering.HW.Features\"\n )from e\n \ntry :\n import Siemens.Engineering.SW as sw\nexcept Exception as e:\n raise tia_e.LibraryImportError(\"Could not import Siemens.Engineering.SW\")from e\n \ntry :\n import Siemens.Engineering.SW.Blocks as swb\nexcept Exception as e:\n raise tia_e.LibraryImportError(\n \"Could not import Siemens.Engineering.SW.Blocks\"\n )from e\n \ntry :\n import Siemens.Engineering.Library as lib\nexcept Exception as e:\n raise tia_e.LibraryImportError(\n \"Could not import Siemens.Engineering.Library\"\n )from e\n \ntry :\n import Siemens.Engineering.Library.MasterCopies as lib_mc\nexcept Exception as e:\n raise tia_e.LibraryImportError(\n \"Could not import Siemens.Engineering.Library.MasterCopies\"\n )from e\n \ntry :\n import Siemens.Engineering.Library.Types as lib_type\nexcept Exception as e:\n raise tia_e.LibraryImportError(\n \"Could not import Siemens.Engineering.Library.Types\"\n )from e\n \n \nclass Device(CompositionItem):\n ''\n\n\n\n\n\n \n \n def __init__(self,parent:Devices,name:str):\n  ''\n\n\n\n\n\n\n\n  \n  self.parent=parent\n  self.name=name\n  self.__value=None\n  \n  if self.parent.value is None :\n   raise tia_e.InvalidDeviceComposition(\"Parent value is None\")\n   \n  value=self.parent.value.Find(name)\n  \n  if value is None :\n   self.value=None\n  else :\n   self.value=value\n   \n @property\n def value(self)->Optional[hw.Device]:\n  return self.__value\n  \n @value.setter\n def value(self,value:Optional[hw.Device])->None :\n  self.__value=value\n  \n def exists(self)->bool:\n  ''\n\n\n\n  \n  return self.value is not None\n  \n def remove(self)->None :\n  ''\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidDevice(\"Value is None\")\n   \n  self.value.Delete()\n  self.value=None\n  \n def delete(self)->None :\n  ''\n  self.remove()\n  \n def get_items(self)->DeviceItems:\n  ''\n\n\n\n  \n  return DeviceItems(self)\n  \n  \nclass Devices(Composition[Device]):\n ''\n\n\n\n\n\n \n \n def __init__(self,parent:Project)->None :\n  ''\n\n\n\n\n\n\n  \n  self.parent=parent\n  self.__value=None\n  \n  if self.parent.value is None :\n   raise tia_e.InvalidProject(\"Project value is None\")\n   \n  value=self.parent.value.Devices\n  \n  self.value=value\n  \n @property\n def value(self)->Optional[hw.DeviceComposition]:\n  return self.__value\n  \n @value.setter\n def value(self,value:Optional[hw.DeviceComposition])->None :\n  self.__value=value\n  \n def find(self,name:str)->Device:\n  ''\n\n\n\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidDeviceComposition(\"Value is None\")\n   \n  return Device(self,name)\n  \n def __iter__(self)->Iterator[Device]:\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidDeviceComposition(\"Value is None\")\n   \n  device:hw.Device\n  for device in self.value:\n   yield Device(self,device.Name)\n   \n def create(\n self,\n HwTypeIdentifier:str,\n name:str,\n device_name:Optional[str],\n )->Device:\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidDeviceComposition(\"Value is None\")\n   \n  device=Device(self,name)\n  \n  if device.value is not None :\n   raise tia_e.DeviceAlreadyExists(f\"Device '{name}' already exists\")\n   \n  if device_name is None :\n   self.value.CreateWithItem(HwTypeIdentifier,name,None )\n  else :\n   self.value.CreateWithItem(HwTypeIdentifier,device_name,name)\n   \n  return Device(self,name)\n  \n def create_PLC(\n self,article_no:str,version:str,name:str,device_name:str\n )->Device:\n  ''\n\n\n\n\n\n\n\n\n\n\n  \n  hw_id=f\"OrderNumber:{article_no}/{version}\"\n  return self.create(hw_id,name,device_name)\n  \n def create_HMI(\n self,article_no:str,version:str,name:str\n )->Device:\n  ''\n\n\n\n\n\n\n\n\n\n  \n  hw_id=f\"OrderNumber:{article_no}/{version}\"\n  return self.create(hw_id,name,None )\n  \n  \nclass DeviceItem(CompositionItem):\n ''\n\n\n\n\n\n\n\n\n \n \n def __init__(self,parent:DeviceItems,name:str):\n  ''\n\n\n\n\n\n\n\n  \n  self.parent=parent\n  self.name=name\n  self.__value=None\n  \n  if self.parent.value is None :\n   raise tia_e.InvalidDeviceItemComposition(\"Parent value is None\")\n   \n  value=None\n  \n  item:hw.DeviceItem\n  for item in self.parent.value:\n   if item.Name ==name:\n    value=item\n    break\n    \n  if value is None :\n   self.value=None\n  else :\n   self.value=value\n   \n @property\n def value(self)->Optional[hw.DeviceItem]:\n  return self.__value\n  \n @value.setter\n def value(self,value:Optional[hw.DeviceItem])->None :\n  self.__value=value\n  \n def get_software(self)->Union[PLCSoftware,None ]:\n \n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidDeviceItem(\"Value is None\")\n   \n  software_container:Optional[hwf.SoftwareContainer]\n  software_container=self.value.GetService[hwf.SoftwareContainer]()\n  \n  if software_container is None :\n   return None\n   \n  software_type=software_container.Software.ToString()\n  \n  if software_type ==\"Siemens.Engineering.SW.PlcSoftware\":\n   return PLCSoftware(self)\n   \n  return None\n  \n def get_items(self)->Optional[DeviceItems]:\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidDeviceItem(\"Value is None\")\n   \n  if self.value.DeviceItems.Count >0:\n   return DeviceItems(self)\n   \n  return None\n  \n def set_name(self,name:str)->None :\n  if self.value is None :\n   raise tia_e.InvalidDeviceItem(\"Value is None\")\n   \n  self.value.Name=name\n  self.name=name\n  \n  return None\n  \n  \nclass DeviceItems(Composition[DeviceItem]):\n ''\n\n\n\n\n\n\n\n\n \n \n def __init__(self,parent:Union[Device,DeviceItem])->None :\n  ''\n\n\n\n\n\n\n\n  \n  self.parent=parent\n  self.__value=None\n  \n  if self.parent.value is None :\n   raise tia_e.InvalidDevice(\"Device value is None\")\n   \n  value=self.parent.value.DeviceItems\n  \n  self.value=value\n  \n @property\n def value(self)->Optional[hw.DeviceItemComposition]:\n  return self.__value\n  \n @value.setter\n def value(self,value:Optional[hw.DeviceItemComposition])->None :\n  self.__value=value\n  \n def find(self,name:str)->DeviceItem:\n  ''\n\n\n\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidDeviceItemComposition(\"Value is None\")\n   \n  return DeviceItem(self,name)\n  \n def __iter__(self)->Iterator[DeviceItem]:\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidDeviceItemComposition(\"Value is None\")\n   \n  device_item:hw.DeviceItem\n  for device_item in self.value:\n   yield DeviceItem(self,device_item.Name)\n   \n def get_device_items(self)->list[DeviceItem]:\n  ''\n\n\n\n  \n  device_items:list[DeviceItem]=[]\n  for device_item in self:\n   device_items.append(device_item)\n   \n  return device_items\n  \n  \nclass PLCSoftware(TiaObject):\n ''\n\n\n\n\n\n\n \n \n def __init__(self,parent:DeviceItem)->None :\n  ''\n\n\n\n\n\n\n\n\n\n  \n  self.parent=parent\n  self.__value=None\n  \n  if self.parent.value is None :\n   raise tia_e.InvalidDeviceItem(\"Value is None\")\n   \n  software_container:Optional[hwf.SoftwareContainer]\n  software_container=self.parent.value.GetService[hwf.SoftwareContainer]()\n  \n  if software_container is None :\n   raise tia_e.InvalidDeviceItem(\"Software container is None\")\n   \n  value=software_container.Software\n  \n  if not isinstance(value,sw.PlcSoftware):\n   raise tia_e.InvalidSoftwareType(\"Software is not PLC software\")\n   \n  self.value=value\n  \n @property\n def value(self)->Optional[sw.PlcSoftware]:\n  return self.__value\n  \n @value.setter\n def value(self,value:Optional[sw.PlcSoftware])->None :\n  self.__value=value\n  \n def get_system_block_groups(self)->PLCSystemBlockGroups:\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidSoftware(\"Value is None\")\n   \n  return PLCSystemBlockGroups(self)\n  \n def get_user_block_groups(self)->PLCUserBlockGroups:\n  ''\n\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidSoftware(\"Value is None\")\n   \n  return PLCUserBlockGroups(self)\n  \n def get_blocks(self)->PLCBlocks:\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidSoftware(\"Value is None\")\n   \n  return PLCBlocks(self)\n  \n def get_all_blocks(self,recursive:bool=False )->list[PLCBlock]:\n  ''\n\n\n\n\n\n\n\n\n  \n  if not recursive:\n   return list(self.get_blocks())\n   \n  blocks=list(self.get_blocks())\n  for system_group in self.get_system_block_groups():\n   blocks.extend(system_group.get_all_blocks(True ))\n  for user_group in self.get_user_block_groups():\n   blocks.extend(user_group.get_all_blocks(True ))\n   \n  return blocks\n  \n  \nclass PLCSystemBlockGroup(CompositionItem):\n ''\n\n\n\n\n\n\n \n \n def __init__(self,parent:PLCSystemBlockGroups,name:str)->None :\n  ''\n\n\n\n\n\n\n\n  \n  self.parent=parent\n  self.name=name\n  self.__value=None\n  \n  if self.parent.value is None :\n   raise tia_e.InvalidSystemBlockGroupComposition(\"Parent value is None\")\n   \n  value=self.parent.value.Find(name)\n  \n  self.value=value\n  \n @property\n def value(self)->Optional[swb.PlcSystemBlockGroup]:\n  return self.__value\n  \n @value.setter\n def value(self,value:Optional[swb.PlcSystemBlockGroup])->None :\n  self.__value=value\n  \n def get_groups(self)->PLCSystemBlockGroups:\n  ''\n\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidSystemBlockGroup(\"Value is None\")\n   \n  return PLCSystemBlockGroups(self)\n  \n def get_blocks(self)->PLCBlocks:\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidSystemBlockGroup(\"Value is None\")\n   \n  return PLCBlocks(self)\n  \n def get_all_blocks(self,recursive:bool=False )->list[PLCBlock]:\n  ''\n\n\n\n\n\n\n\n\n  \n  if not recursive:\n   return list(self.get_blocks())\n   \n  blocks=list(self.get_blocks())\n  for group in self.get_groups():\n   blocks.extend(group.get_all_blocks(True ))\n   \n  return blocks\n  \n  \nclass PLCSystemBlockGroups(Composition[PLCSystemBlockGroup]):\n ''\n\n\n\n\n\n\n\n \n \n def __init__(self,parent:Union[PLCSoftware,PLCSystemBlockGroup])->None :\n  ''\n\n\n\n\n\n\n\n  \n  self.parent=parent\n  self.__value=None\n  \n  if self.parent.value is None :\n   raise tia_e.InvalidSoftware(\"Software value is None\")\n   \n  value=None\n  \n  if not isinstance(self.parent.value,sw.PlcSoftware):\n   value=self.parent.value.Groups\n   \n  if not isinstance(self.parent.value,swb.PlcSystemBlockGroup):\n   value=self.parent.value.BlockGroup.SystemBlockGroups\n   \n  if value is None :\n   self.value=None\n  else :\n   self.value=value\n   \n @property\n def value(self)->Optional[swb.PlcSystemBlockGroupComposition]:\n  return self.__value\n  \n @value.setter\n def value(self,value:Optional[swb.PlcSystemBlockGroupComposition])->None :\n  self.__value=value\n  \n def find(self,name:str)->PLCSystemBlockGroup:\n  ''\n\n\n\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidSystemBlockGroupComposition(\"Value is None\")\n   \n  return PLCSystemBlockGroup(self,name)\n  \n def __iter__(self)->Iterator[PLCSystemBlockGroup]:\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidSystemBlockGroupComposition(\"Value is None\")\n   \n  system_block_group:swb.PlcSystemBlockGroup\n  for system_block_group in self.value:\n   yield PLCSystemBlockGroup(self,system_block_group.Name)\n   \n def create(self,name:str)->PLCSystemBlockGroup:\n  ''\n\n\n\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidSystemBlockGroupComposition(\"Value is None\")\n   \n  self.value.Create(name)\n  \n  return PLCSystemBlockGroup(self,name)\n  \n  \nclass PLCUserBlockGroup(CompositionItem):\n ''\n\n\n\n\n\n\n\n \n \n def __init__(self,parent:PLCUserBlockGroups,name:str)->None :\n  ''\n\n\n\n\n\n\n\n  \n  self.parent=parent\n  self.name=name\n  self.__value=None\n  \n  if self.parent.value is None :\n   raise tia_e.InvalidUserBlockGroupComposition(\"Parent value is None\")\n   \n  value=self.parent.value.Find(name)\n  \n  self.value=value\n  \n @property\n def value(self)->Optional[swb.PlcBlockUserGroup]:\n  return self.__value\n  \n @value.setter\n def value(self,value:Optional[swb.PlcBlockUserGroup])->None :\n  self.__value=value\n  \n def get_groups(self)->PLCUserBlockGroups:\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidUserBlockGroup(\"Value is None\")\n   \n  return PLCUserBlockGroups(self)\n  \n def get_blocks(self)->PLCBlocks:\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidUserBlockGroup(\"Value is None\")\n   \n  return PLCBlocks(self)\n  \n def get_all_blocks(self,recursive:bool=False )->list[PLCBlock]:\n  ''\n\n\n\n\n\n\n  \n  if not recursive:\n   return list(self.get_blocks())\n   \n  blocks=list(self.get_blocks())\n  for group in self.get_groups():\n   blocks.extend(group.get_all_blocks(True ))\n   \n  return blocks\n  \n  \nclass PLCUserBlockGroups(Composition[PLCUserBlockGroup]):\n ''\n\n\n\n\n\n\n\n \n \n def __init__(self,parent:Union[PLCSoftware,PLCUserBlockGroup])->None :\n  ''\n\n\n\n\n\n\n\n  \n  self.parent=parent\n  self.__value:Optional[swb.PlcBlockUserGroupComposition]=None\n  \n  value=None\n  \n  if self.parent.value is None :\n   raise tia_e.InvalidSoftware(\"Software value is None\")\n   \n  if not isinstance(self.parent.value,sw.PlcSoftware):\n   value=self.parent.value.Groups\n   \n  if not isinstance(self.parent.value,swb.PlcBlockUserGroup):\n   value=self.parent.value.BlockGroup.Groups\n   \n  if value is None :\n   self.value=None\n  else :\n   self.value=value\n   \n @property\n def value(self)->Optional[swb.PlcBlockUserGroupComposition]:\n  return self.__value\n  \n @value.setter\n def value(self,value:Optional[swb.PlcBlockUserGroupComposition])->None :\n  self.__value=value\n  \n def find(self,name:str)->PLCUserBlockGroup:\n  ''\n\n\n\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidUserBlockGroupComposition(\"Value is None\")\n   \n  return PLCUserBlockGroup(self,name)\n  \n def __iter__(self)->Iterator[PLCUserBlockGroup]:\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidUserBlockGroupComposition(\"Value is None\")\n   \n  user_block_group:swb.PlcBlockUserGroup\n  for user_block_group in self.value:\n   yield PLCUserBlockGroup(self,user_block_group.Name)\n   \n def create(self,name:str)->PLCUserBlockGroup:\n  ''\n\n\n\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidUserBlockGroupComposition(\"Value is None\")\n   \n  self.value.Create(name)\n  \n  return PLCUserBlockGroup(self,name)\n  \n  \nclass PLCBlock(CompositionItem):\n ''\n\n\n\n\n\n\n \n \n def __init__(self,parent:PLCBlocks,name:str)->None :\n  ''\n\n\n\n\n\n\n\n  \n  self.parent=parent\n  self.name=name\n  self.__value=None\n  \n  if self.parent.value is None :\n   raise tia_e.InvalidBlockComposition(\"Parent value is None\")\n   \n  value=self.parent.value.Find(name)\n  \n  self.value=value\n  \n @property\n def value(self)->Optional[swb.PlcBlock]:\n  return self.__value\n  \n @value.setter\n def value(self,value:Optional[swb.PlcBlock])->None :\n  self.__value=value\n  \n def export(self)->str:\n  ''\n\n\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidBlock(\"Value is None\")\n   \n  if not self.value.IsConsistent:\n   raise tia_e.InvalidBlock(\"Block is inconsistent\")\n   \n  new_file=os.path.join(cfg.DATA_PATH,\"exported_blocks\",f\"{self.name}.xml\")\n  \n  if not os.path.exists(os.path.dirname(new_file)):\n   os.makedirs(os.path.dirname(new_file))\n   \n  file_info=FileInfo(new_file)\n  \n  self.value.Export(file_info,tia.ExportOptions(0))\n  \n  return new_file\n  \n def update_software(self)->None :\n  ''\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidBlock(\"Value is None\")\n   \n  self.value.GetService[comp.ICompilable]().Compile()\n  \n def get_type(self)->str:\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidBlock(\"Value is None\")\n   \n  temp=self.value.GetType().Name\n  \n  return temp.split(\".\")[-1]\n  \n def assign_prodiag(self,prodiag:str):\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidBlock(\"Value is None\")\n   \n  self.value.SetAttribute(\"AssignedProDiagFB\",prodiag)\n  \n  \nclass PLCBlocks(Composition[PLCBlock]):\n ''\n\n\n\n\n\n\n\n \n \n def __init__(\n self,parent:Union[PLCSoftware,PLCSystemBlockGroup,PLCUserBlockGroup]\n )->None :\n  ''\n\n\n\n\n\n\n\n\n\n  \n  self.parent=parent\n  self.__value=None\n  \n  if isinstance(self.parent,PLCSoftware):\n   if self.parent.value is None :\n    raise tia_e.InvalidSoftware(\"Software value is None\")\n    \n   self.value=self.parent.value.BlockGroup.Blocks\n  elif isinstance(self.parent,PLCSystemBlockGroup):\n   if self.parent.value is None :\n    raise tia_e.InvalidSystemBlockGroup(\"Value is None\")\n    \n   self.value=self.parent.value.Blocks\n  else :\n   if self.parent.value is None :\n    raise tia_e.InvalidUserBlockGroup(\"Value is None\")\n    \n   self.value=self.parent.value.Blocks\n   \n @property\n def value(self)->Optional[swb.PlcBlockComposition]:\n  return self.__value\n  \n @value.setter\n def value(self,value:Optional[swb.PlcBlockComposition])->None :\n  self.__value=value\n  \n def find(self,name:str)->PLCBlock:\n  ''\n\n\n\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidBlockComposition(\"Value is None\")\n   \n  return PLCBlock(self,name)\n  \n def __iter__(self)->Iterator[PLCBlock]:\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidBlockComposition(\"Value is None\")\n   \n  block:swb.PlcBlock\n  for block in self.value:\n   yield PLCBlock(self,block.Name)\n   \n def create(\n self,path:str,name:str,labels:Optional[dict[str,str]]=None\n )->PLCBlock:\n  ''\n\n\n\n\n\n\n\n\n\n\n\n  \n  if labels is None :\n   labels={}\n   \n  if self.value is None :\n   raise tia_e.InvalidBlockComposition(\"Value is None\")\n   \n  if not os.path.isfile(path):\n   raise tia_e.InvalidPath(f\"Invalid path: {path}\")\n   \n  new_file=os.path.join(cfg.DATA_PATH,\"temp\",os.path.basename(path))\n  \n  if not os.path.exists(os.path.dirname(new_file)):\n   os.makedirs(os.path.dirname(new_file))\n   \n  shutil.copyfile(path,new_file)\n  \n  with open(new_file,\"r\",encoding=\"utf-8\")as file:\n   data=file.read()\n   \n  for key,value in labels.items():\n   data=data.replace(key,value)\n   \n  data=data.replace(\"__NAME__\",name)\n  \n  match=re.match(r\"__\\w+__\",data)\n  \n  if match:\n   for group in match.groups():\n    print(f\"Warning: {group} is not replaced in {new_file}!\")\n    \n  with open(new_file,\"w\",encoding=\"utf-8\")as file:\n   file.write(data)\n   \n  file_info=FileInfo(new_file)\n  \n  self.value.Import(file_info,tia.ImportOptions.Override)\n  \n  os.remove(new_file)\n  \n  return PLCBlock(self,name)\n  \n def create_instance_database(self,name:str,fb_name:str)->PLCBlock:\n  ''\n\n\n\n\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidBlockComposition(\"Value is None\")\n   \n  self.value.CreateInstanceDB(name,True ,1,fb_name)\n  \n  return PLCBlock(self,name)\n  \n def create_prodiag_block(self,name:str)->PLCBlock:\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidBlockComposition(\"Value is None\")\n   \n  self.value.CreateFB(name,True ,1,swb.ProgrammingLanguage.ProDiag)\n  \n  idb_name=name.replace(\"FB\",\"IDB\")\n  \n  if isinstance(self.parent,PLCSoftware):\n   groups=self.parent.get_user_block_groups()\n  else :\n   groups=self.parent.get_groups()\n   \n  if not groups.find(\"IDB\").value:\n   groups.create(\"IDB\")\n   \n  groups.find(\"IDB\").get_blocks().create_instance_database(idb_name,name)\n  \n  return PLCBlock(self,name)\n  \n  \nclass GlobalLibrary(CompositionItem):\n ''\n\n\n\n\n\n \n \n def __init__(self,parent:GlobalLibraries,name:str):\n  ''\n\n\n\n\n\n\n\n  \n  self.parent=parent\n  self.name=name\n  self.__value=None\n  \n  if self.parent.value is None :\n   raise tia_e.InvalidGlobalLibraryComposition(\"Parent value is None\")\n   \n  self.value=None\n  \n  global_library:lib.GlobalLibrary\n  for global_library in self.parent.value:\n   if global_library.Name ==name:\n    self.value=global_library\n    break\n    \n @property\n def value(self)->Optional[lib.GlobalLibrary]:\n  return self.__value\n  \n @value.setter\n def value(self,value:Optional[lib.GlobalLibrary])->None :\n  self.__value=value\n  \n @property\n def type_folder(self)->LibraryTypeFolder:\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidGlobalLibrary(\"Value is None\")\n   \n  return LibraryTypeFolder(self)\n  \n @type_folder.setter\n def type_folder(self,value:LibraryTypeFolder)->None :\n  raise NotImplementedError(\"Cannot set type folder\")\n  \n @property\n def master_copy_folder(self)->MasterCopyFolder:\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidGlobalLibrary(\"Value is None\")\n   \n  return MasterCopyFolder(self)\n  \n @master_copy_folder.setter\n def master_copy_folder(self,value:MasterCopyFolder)->None :\n  raise NotImplementedError(\"Cannot set master copy folder\")\n  \n  \nclass GlobalLibraries(Composition[GlobalLibrary]):\n ''\n\n\n\n\n \n \n def __init__(self,parent:Client):\n  self.parent=parent\n  self.__value=None\n  \n  if self.parent.session is None :\n   raise tia_e.TIAInvalidSession(\"Session is None\")\n   \n  self.value=self.parent.session.GlobalLibraries\n  \n @property\n def value(self)->Optional[lib.GlobalLibraryComposition]:\n  return self.__value\n  \n @value.setter\n def value(self,value:Optional[lib.GlobalLibraryComposition])->None :\n  self.__value=value\n  \n def find(self,name:str)->GlobalLibrary:\n  if self.value is None :\n   raise tia_e.InvalidGlobalLibraryComposition(\"Value is None\")\n   \n  return GlobalLibrary(self,name)\n  \n def __iter__(self)->Iterator[GlobalLibrary]:\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidGlobalLibraryComposition(\"Value is None\")\n   \n  global_library:lib.GlobalLibrary\n  for global_library in self.value:\n   yield GlobalLibrary(self,global_library.Name)\n   \n   \nclass LibraryTypeFolder(TiaObject):\n ''\n\n\n\n\n\n\n \n \n def __init__(self,parent:GlobalLibrary):\n  self.parent=parent\n  self.__value=None\n  \n  if self.parent.value is None :\n   raise tia_e.InvalidGlobalLibrary(\"Value is None\")\n   \n  self.value=self.parent.value.TypeFolder\n  \n @property\n def value(self)->Optional[lib_type.LibraryTypeFolder]:\n  return self.__value\n  \n @value.setter\n def value(self,value:Optional[lib_type.LibraryTypeFolder])->None :\n  self.__value=value\n  \n @property\n def folders(self)->LibraryTypeUserFolders:\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidTypeFolder(\"Value is None\")\n   \n  return LibraryTypeUserFolders(self)\n  \n @folders.setter\n def folders(self,value:LibraryTypeUserFolders)->None :\n  raise NotImplementedError(\"Cannot set type user folders\")\n  \n @property\n def types(self)->LibraryTypes:\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidTypeFolder(\"Value is None\")\n   \n  return LibraryTypes(self)\n  \n @types.setter\n def types(self,value:LibraryTypes)->None :\n  raise NotImplementedError(\"Cannot set types\")\n  \n  \nclass LibraryTypeUserFolder(CompositionItem):\n ''\n\n\n\n\n\n\n\n\n \n \n def __init__(self,parent:LibraryTypeUserFolders,name:str):\n  self.parent=parent\n  self.name=name\n  self.__value=None\n  \n  if self.parent.value is None :\n   raise tia_e.InvalidTypeUserFolderComposition(\"Parent value is None\")\n   \n  self.value=self.parent.value.Find(name)\n  \n @property\n def value(self)->Optional[lib_type.LibraryTypeUserFolder]:\n  return self.__value\n  \n @value.setter\n def value(self,value:Optional[lib_type.LibraryTypeUserFolder])->None :\n  self.__value=value\n  \n @property\n def folders(self)->LibraryTypeUserFolders:\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidTypeFolder(\"Value is None\")\n   \n  return LibraryTypeUserFolders(self)\n  \n @folders.setter\n def folders(self,value:LibraryTypeUserFolders)->None :\n  raise NotImplementedError(\"Cannot set type user folders\")\n  \n @property\n def types(self)->LibraryTypes:\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidTypeFolder(\"Value is None\")\n   \n  return LibraryTypes(self)\n  \n @types.setter\n def types(self,value:LibraryTypes)->None :\n  raise NotImplementedError(\"Cannot set types\")\n  \n  \nclass LibraryTypeUserFolders(Composition[LibraryTypeUserFolder]):\n ''\n\n\n\n\n \n \n def __init__(self,parent:Union[LibraryTypeFolder,LibraryTypeUserFolder]):\n  self.parent=parent\n  self.__value=None\n  \n  if self.parent.value is None :\n   raise tia_e.InvalidTypeFolder(\"Value is None\")\n   \n  self.value=self.parent.value.Folders\n  \n @property\n def value(self)->Optional[lib_type.LibraryTypeUserFolderComposition]:\n  return self.__value\n  \n @value.setter\n def value(self,value:Optional[lib_type.LibraryTypeUserFolderComposition])->None :\n  self.__value=value\n  \n def find(self,name:str)->LibraryTypeUserFolder:\n  if self.value is None :\n   raise tia_e.InvalidTypeUserFolderComposition(\"Value is None\")\n   \n  return LibraryTypeUserFolder(self,name)\n  \n def __iter__(self)->Iterator[LibraryTypeUserFolder]:\n  if self.value is None :\n   raise tia_e.InvalidTypeUserFolderComposition(\"Value is None\")\n   \n  folder:lib_type.LibraryTypeUserFolder\n  for folder in self.value:\n   yield LibraryTypeUserFolder(self,folder.Name)\n   \n   \nclass LibraryType(CompositionItem):\n ''\n\n\n\n\n\n \n \n def __init__(self,parent:LibraryTypes,name:str):\n  self.parent=parent\n  self.name=name\n  self.__value=None\n  \n  if self.parent.value is None :\n   raise tia_e.InvalidTypeComposition(\"Parent value is None\")\n   \n  self.value=self.parent.value.Find(name)\n  \n @property\n def value(self)->Optional[lib_type.LibraryType]:\n  return self.__value\n  \n @value.setter\n def value(self,value:Optional[lib_type.LibraryType])->None :\n  self.__value=value\n  \n  \nclass LibraryTypes(Composition[LibraryType]):\n ''\n\n\n\n\n \n \n def __init__(self,parent:Union[LibraryTypeFolder,LibraryTypeUserFolder]):\n  self.parent=parent\n  self.__value=None\n  \n  if self.parent.value is None :\n   raise tia_e.InvalidTypeFolder(\"Value is None\")\n   \n  self.value=self.parent.value.Types\n  \n @property\n def value(self)->Optional[lib_type.LibraryTypeComposition]:\n  return self.__value\n  \n @value.setter\n def value(self,value:Optional[lib_type.LibraryTypeComposition])->None :\n  self.__value=value\n  \n def find(self,name:str)->LibraryType:\n  if self.value is None :\n   raise tia_e.InvalidTypeComposition(\"Value is None\")\n   \n  return LibraryType(self,name)\n  \n def __iter__(self)->Iterator[LibraryType]:\n  if self.value is None :\n   raise tia_e.InvalidTypeComposition(\"Value is None\")\n   \n  library_type:lib_type.LibraryType\n  for library_type in self.value:\n   yield LibraryType(self,library_type.Name)\n   \n   \nclass MasterCopyFolder(TiaObject):\n ''\n\n\n\n\n\n \n \n def __init__(self,parent:GlobalLibrary):\n  self.parent=parent\n  self.__value=None\n  \n  if self.parent.value is None :\n   raise tia_e.InvalidGlobalLibrary(\"Value is None\")\n   \n  self.value=self.parent.value.MasterCopyFolder\n  \n @property\n def value(self)->Optional[lib_mc.MasterCopyFolder]:\n  return self.__value\n  \n @value.setter\n def value(self,value:Optional[lib_mc.MasterCopyFolder])->None :\n  self.__value=value\n  \n @property\n def folders(self)->MasterCopyUserFolders:\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidTypeFolder(\"Value is None\")\n   \n  return MasterCopyUserFolders(self)\n  \n @folders.setter\n def folders(self,value:MasterCopyUserFolders)->None :\n  raise NotImplementedError(\"Cannot set type user folders\")\n  \n @property\n def master_copies(self)->MasterCopies:\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidMasterCopyFolder(\"Value is None\")\n   \n  return MasterCopies(self)\n  \n @master_copies.setter\n def master_copies(self,value:MasterCopies)->None :\n  raise NotImplementedError(\"Cannot set master copies\")\n  \n  \nclass MasterCopyUserFolder(CompositionItem):\n ''\n\n\n\n\n\n \n \n def __init__(self,parent:MasterCopyUserFolders,name:str):\n  self.parent=parent\n  self.name=name\n  self.__value=None\n  \n  if self.parent.value is None :\n   raise tia_e.InvalidMasterCopyUserFolderComposition(\"Parent value is None\")\n   \n  self.value=self.parent.value.Find(name)\n  \n @property\n def value(self)->Optional[lib_mc.MasterCopyUserFolder]:\n  return self.__value\n  \n @value.setter\n def value(self,value:Optional[lib_mc.MasterCopyUserFolder])->None :\n  self.__value=value\n  \n @property\n def folders(self)->MasterCopyUserFolders:\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidTypeFolder(\"Value is None\")\n   \n  return MasterCopyUserFolders(self)\n  \n @folders.setter\n def folders(self,value:MasterCopyUserFolders)->None :\n  raise NotImplementedError(\"Cannot set type user folders\")\n  \n @property\n def master_copies(self)->MasterCopies:\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.InvalidMasterCopyFolder(\"Value is None\")\n   \n  return MasterCopies(self)\n  \n @master_copies.setter\n def master_copies(self,value:MasterCopies)->None :\n  raise NotImplementedError(\"Cannot set master copies\")\n  \n  \nclass MasterCopyUserFolders(Composition[MasterCopyUserFolder]):\n ''\n\n\n\n\n \n \n def __init__(self,parent:Union[MasterCopyFolder,MasterCopyUserFolder]):\n  self.parent=parent\n  self.__value=None\n  \n  if self.parent.value is None :\n   raise tia_e.InvalidMasterCopyFolder(\"Value is None\")\n   \n  self.value=self.parent.value.Folders\n  \n @property\n def value(self)->Optional[lib_mc.MasterCopyUserFolderComposition]:\n  return self.__value\n  \n @value.setter\n def value(self,value:Optional[lib_mc.MasterCopyUserFolderComposition])->None :\n  self.__value=value\n  \n def find(self,name:str)->MasterCopyUserFolder:\n  if self.value is None :\n   raise tia_e.InvalidMasterCopyUserFolderComposition(\"Value is None\")\n   \n  return MasterCopyUserFolder(self,name)\n  \n def __iter__(self)->Iterator[MasterCopyUserFolder]:\n  if self.value is None :\n   raise tia_e.InvalidMasterCopyUserFolderComposition(\"Value is None\")\n   \n  folder:lib_mc.MasterCopyUserFolder\n  for folder in self.value:\n   yield MasterCopyUserFolder(self,folder.Name)\n   \n   \nclass MasterCopy(CompositionItem):\n ''\n\n\n\n\n \n \n def __init__(self,parent:MasterCopies,name:str):\n  self.parent=parent\n  self.name=name\n  self.__value=None\n  \n  if self.parent.value is None :\n   raise tia_e.InvalidMasterCopyComposition(\"Parent value is None\")\n   \n  self.value=self.parent.value.Find(name)\n  \n @property\n def value(self)->Optional[lib_mc.MasterCopy]:\n  return self.__value\n  \n @value.setter\n def value(self,value:Optional[lib_mc.MasterCopy])->None :\n  self.__value=value\n  \n  \nclass MasterCopies(Composition[MasterCopy]):\n ''\n\n\n\n\n \n \n def __init__(self,parent:Union[MasterCopyFolder,MasterCopyUserFolder]):\n  self.parent=parent\n  self.__value=None\n  \n  if self.parent.value is None :\n   raise tia_e.InvalidMasterCopyFolder(\"Value is None\")\n   \n  self.value=self.parent.value.MasterCopies\n  \n @property\n def value(self)->Optional[lib_mc.MasterCopyComposition]:\n  return self.__value\n  \n @value.setter\n def value(self,value:Optional[lib_mc.MasterCopyComposition])->None :\n  self.__value=value\n  \n def find(self,name:str)->MasterCopy:\n  if self.value is None :\n   raise tia_e.InvalidMasterCopyComposition(\"Value is None\")\n   \n  return MasterCopy(self,name)\n  \n def __iter__(self)->Iterator[MasterCopy]:\n  if self.value is None :\n   raise tia_e.InvalidMasterCopyComposition(\"Value is None\")\n   \n  master_copy:lib_mc.MasterCopy\n  for master_copy in self.value:\n   yield MasterCopy(self,master_copy.Name)\n   \n   \nclass Client:\n ''\n\n\n\n\n\n\n \n \n def __init__(self)->None :\n  ''\n  \n  self.session:Optional[tia.TiaPortal]=tia.TiaPortal(tia.TiaPortalMode.WithoutUserInterface)\n  self.project:Optional[Project]=None\n  \n  \n  \n  \n def open_gui(self)->None :\n  ''\n\n\n\n  \n  if self.session is None :\n   raise tia_e.TIAInvalidSession(\"Session is None\")\n   \n  process=self.session.GetCurrentProcess()\n  project_open=False\n  \n  if not process.Mode ==tia.TiaPortalMode.WithUserInterface:\n   if self.project and self.project.is_open():\n    project_open=True\n    self.project.close()\n   self.session.Dispose()\n   Process.GetProcessById(process.Id).Kill()\n   self.session=tia.TiaPortal(tia.TiaPortalMode.WithUserInterface)\n   \n   if project_open and self.project:\n    self.project.open()\n    \n def close_gui(self)->None :\n  ''\n\n\n\n  \n  if self.session is None :\n   raise tia_e.TIAInvalidSession(\"Session is None\")\n  process=self.session.GetCurrentProcess()\n  project_open=False\n  \n  if process.Mode ==tia.TiaPortalMode.WithUserInterface:\n   if self.project and self.project.is_open():\n    project_open=True\n    self.project.close()\n    \n   self.session.Dispose()\n   Process.GetProcessById(process.Id).Kill()\n   self.session=tia.TiaPortal(tia.TiaPortalMode.WithoutUserInterface)\n   \n   if project_open and self.project:\n    self.project.open()\n    \n    \n    \n    \n def close(self)->None :\n  ''\n  if self.session is None :\n   return\n   \n  if self.project and self.project.is_open():\n   self.project.close()\n   \n  process=self.session.GetCurrentProcess()\n  self.session.Dispose()\n  self.session=None\n  Process.GetProcessById(process.Id).Kill()\n  \n def quit(self)->None :\n  ''\n  self.close()\n  \n def __del__(self)->None :\n  ''\n  \n  if self.session is None :\n   return\n   \n  try :\n   if self.project and self.project.is_open():\n    self.project.force_close()\n    \n   process=self.session.GetCurrentProcess()\n   self.session.Dispose()\n   self.session=None\n   Process.GetProcessById(process.Id).Kill()\n  except Exception:\n   pass\n   \n   \n   \n   \n   \n def open_project(\n self,path:str,name:str,version:Optional[TiaVersion]=None\n )->Project:\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  if self.session is None :\n   raise tia_e.TIAInvalidSession(\"Session is None\")\n   \n  if self.project is not None and self.project.is_open():\n   self.project.close()\n   \n  self.project=Project(self,path,name,version)\n  self.project.open()\n  \n  return self.project\n  \n def create_project(\n self,path:str,name:str,version:Optional[TiaVersion]=None\n )->Project:\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  if self.session is None :\n   raise tia_e.TIAInvalidSession(\"Session is None\")\n   \n  if self.project is not None and self.project.is_open():\n   self.project.close()\n   \n  self.project=Project(self,path,name,version)\n  self.project.create(True )\n  \n  return self.project\n  \n def create_projects(\n self,path:str,names:list[str],version:Optional[TiaVersion]=None\n )->list[Project]:\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  if self.session is None :\n   raise tia_e.TIAInvalidSession(\"Session is None\")\n   \n  if self.project is not None :\n   self.project.close()\n   \n  projects:list[Project]=[]\n  for name in names:\n   project=Project(self,path,name,version)\n   try :\n    project.create(False )\n   except tia_e.TIAProjectAlreadyExists:\n    projects.append(project)\n    continue\n   projects.append(project)\n   \n  return projects\n  \n  \nclass Project(TiaObject):\n ''\n\n\n\n\n\n\n\n\n\n\n \n \n def __init__(\n self,client:Client,path:str,name:str,version:Optional[TiaVersion]=None\n ):\n  ''\n\n\n\n\n\n\n\n  \n  self.client=client\n  self.path=path\n  self.name=name\n  self.__value=None\n  \n  self.version=version if version is not None else cfg.VERSION\n  self.value=None\n  \n @property\n def value(self)->Optional[tia.Project]:\n  return self.__value\n  \n @value.setter\n def value(self,value:Optional[tia.Project])->None :\n  self.__value=value\n  \n def open(self)->None :\n  ''\n\n\n\n\n  \n  if self.client.session is None :\n   raise tia_e.TIAInvalidSession(\"Session is None\")\n   \n  if self.value is not None :\n   print(\n   f\"There is already a Project open, closing {self.value.Name} before opening {self.name}\"\n   )\n   self.close()\n   \n  if isinstance(self.path,FileInfo):\n   file_info=self.path\n   self.name=file_info.Name.split(\".\")[0]\n  else :\n   file_name=(\n   self.name\n   if self.name.endswith(f\".ap{self.version.value}\")\n   else f\"{self.name}.ap{self.version.value}\"\n   )\n   file_path=os.path.join(self.path,self.name,file_name)\n   self.name=self.name\n   \n   if not os.path.exists(file_path):\n    raise tia_e.TIAProjectNotFound(f\"File {file_path} does not exist\")\n    \n   file_info=FileInfo(file_path)\n   \n  self.value=self.client.session.Projects.Open(file_info)\n  \n  self.client.project=self\n  \n def close(self)->None :\n  ''\n  if self.value is None :\n   return\n  self.save()\n  self.value.Close()\n  self.value=None\n  \n def force_close(self)->None :\n  ''\n  \n  if self.value is None :\n   return\n  self.value.Close()\n  self.value=None\n  \n def create(self,open_existing:bool=False )->None :\n  ''\n\n\n\n\n\n\n\n  \n  if not open_existing:\n   new_session=tia.TiaPortal(tia.TiaPortalMode.WithoutUserInterface)\n   old_session=None\n  else :\n   new_session=None\n   old_session=self.client.session\n   \n   if old_session is None :\n    raise tia_e.TIAInvalidSession(\"Old session is None\")\n    \n  session=new_session if not new_session is None else old_session\n  \n  if session is None :\n   raise tia_e.TIAInvalidSession(\"Session is None\")\n   \n  file_name=(\n  self.name\n  if self.name.endswith(f\".ap{self.version.value}\")\n  else f\"{self.name}.ap{self.version.value}\"\n  )\n  file_path=os.path.join(self.path,self.name,file_name)\n  \n  if os.path.exists(file_path):\n   raise tia_e.TIAProjectAlreadyExists(f\"File {file_path} already exists\")\n   \n  self.value=session.Projects.Create(DirectoryInfo(self.path),self.name)\n  \n  self.client.project=self\n  \n def save(self)->None :\n  ''\n\n\n\n  \n  if self.value is None :\n   raise tia_e.TIAInvalidProject(\"Project is None\")\n  if self.is_modified():\n   self.value.Save()\n   \n def save_as(self,name:str,path:Optional[str]=None )->None :\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.TIAInvalidProject(\"Project is None\")\n   \n  if path is None :\n   dir_info=DirectoryInfo(os.path.join(self.path,name))\n  else :\n   dir_info=DirectoryInfo(os.path.join(path,name))\n   \n  self.value.SaveAs(dir_info)\n  \n  self.close()\n  \n  if path is None :\n   project=Project(self.client,self.path,name,self.version)\n  else :\n   project=Project(self.client,path,name,self.version)\n  project.open()\n  \n def is_modified(self)->bool:\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.TIAInvalidProject(\"Project is None\")\n  return self.value.IsModified\n  \n def compile(self)->None :\n  ''\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.TIAInvalidProject(\"Project is None\")\n   \n  devices:list[hw.DeviceItem]\n  devices=[item for device in self.value.Devices for item in device.DeviceItems]\n  software_containers:list[Optional[hwf.SoftwareContainer]]\n  software_containers=[item.GetService[hwf.SoftwareContainer]()for item in devices]\n  software_containers_filtered=[\n  item for item in software_containers if item is not None\n  ]\n  \n  for software_container in software_containers_filtered:\n   software=software_container.Software\n   \n   software_compile_service:Optional[comp.ICompilable]\n   software_compile_service=software.GetService[comp.ICompilable]()\n   if software_compile_service is not None :\n    software_compile_service.Compile()\n    \n def get_file_info(self)->FileInfo:\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.TIAInvalidProject(\"Project is None\")\n  return self.value.Path\n  \n def is_open(self)->bool:\n  ''\n\n\n\n  \n  return self.value is not None\n  \n def get_device_item(self,name:str)->Optional[DeviceItem]:\n  ''\n\n\n\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.TIAInvalidProject(\"Project is None\")\n   \n  for device in self.devices:\n   for item in device.get_items():\n    if item.name ==name:\n     return item\n     \n  return None\n  \n def get_plcs(self)->list[DeviceItem]:\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.TIAInvalidProject(\"Project is None\")\n   \n  plcs:list[DeviceItem]=[]\n  \n  for device in self.devices:\n   for item in device.get_items():\n    if isinstance(item.get_software(),PLCSoftware):\n     plcs.append(item)\n     \n  return plcs\n  \n @property\n def devices(self)->Devices:\n  ''\n\n\n\n\n\n\n  \n  if self.value is None :\n   raise tia_e.TIAInvalidProject(\"Project is None\")\n  return Devices(self)\n  \n @devices.setter\n def devices(self,value:Any)->None :\n  raise NotImplementedError(\n  \"Devices can only be accessed through the devices property\"\n  )\n", ["Siemens.Engineering", "Siemens.Engineering.Compiler", "Siemens.Engineering.HW", "Siemens.Engineering.HW.Features", "Siemens.Engineering.Library", "Siemens.Engineering.Library.MasterCopies", "Siemens.Engineering.Library.Types", "Siemens.Engineering.SW", "Siemens.Engineering.SW.Blocks", "System.Diagnostics", "System.IO", "__future__", "clr", "os", "re", "shutil", "tia_portal.config", "tia_portal.exceptions", "tia_portal.protocol.composition", "tia_portal.protocol.objects", "tia_portal.version", "typing"], 1], "tia_portal.protocol.composition": [".py", "''\nfrom __future__ import annotations\nfrom typing import Any,Optional,Protocol,Self,TypeVar,Iterator\n\nfrom tia_portal.protocol.objects import TiaObject\n\nT=TypeVar(\"T\",covariant=True )\n\n\nclass Composition(TiaObject,Protocol[T]):\n ''\n \n def __init__(self,parent:Any):\n  ...\n  \n def __iter__(self)->Iterator[T]:\n  ...\n  \n def find(self,name:str)->Optional[T]:\n  ...\n  \n  \nclass CompositionItem(TiaObject,Protocol):\n ''\n \n def __init__(self,parent:Composition[Self],name:str):\n  ...\n", ["__future__", "tia_portal.protocol.objects", "typing"]], "tia_portal.protocol.objects": [".py", "''\nfrom abc import abstractmethod\nfrom typing import Any,Optional,Protocol\n\n\nclass TiaObject(Protocol):\n ''\n \n @property\n @abstractmethod\n def value(self)->Optional[Any]:\n  ...\n  \n @value.setter\n @abstractmethod\n def value(self,value:Optional[Any])->None :\n  ...\n", ["abc", "typing"]], "tia_portal.protocol": [".py", "", [], 1]}
__BRYTHON__.update_VFS(scripts)
