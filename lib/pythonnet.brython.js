__BRYTHON__.use_VFS = true;
var scripts = {"$timestamp": 1692966726999, "pythonnet": [".py", "''\n\nimport sys\nfrom pathlib import Path\nfrom typing import Dict,Optional,Union,Any\nimport clr_loader\n\n__all__=[\"set_runtime\",\"set_runtime_from_env\",\"load\",\"unload\",\"get_runtime_info\"]\n\n_RUNTIME:Optional[clr_loader.Runtime]=None\n_LOADER_ASSEMBLY:Optional[clr_loader.Assembly]=None\n_LOADED:bool=False\n\n\ndef set_runtime(runtime:Union[clr_loader.Runtime,str],**params:str)->None :\n ''\n\n\n\n\n\n \n \n global _RUNTIME\n if _LOADED:\n  raise RuntimeError(f\"The runtime {_RUNTIME} has already been loaded\")\n  \n if isinstance(runtime,str):\n  runtime=_create_runtime_from_spec(runtime,params)\n  \n _RUNTIME=runtime\n \n \ndef get_runtime_info()->Optional[clr_loader.RuntimeInfo]:\n ''\n \n if _RUNTIME is None :\n  return None\n else :\n  return _RUNTIME.info()\n  \n  \ndef _get_params_from_env(prefix:str)->Dict[str,str]:\n from os import environ\n \n full_prefix=f\"PYTHONNET_{prefix.upper()}_\"\n len_=len(full_prefix)\n \n env_vars={\n (k[len_:].lower()):v\n for k,v in environ.items()\n if k.upper().startswith(full_prefix)\n }\n \n return env_vars\n \n \ndef _create_runtime_from_spec(\nspec:str,params:Optional[Dict[str,Any]]=None\n)->clr_loader.Runtime:\n was_default=False\n if spec ==\"default\":\n  was_default=True\n  if sys.platform ==\"win32\":\n   spec=\"netfx\"\n  else :\n   spec=\"mono\"\n   \n params=params or _get_params_from_env(spec)\n \n try :\n  if spec ==\"netfx\":\n   return clr_loader.get_netfx(**params)\n  elif spec ==\"mono\":\n   return clr_loader.get_mono(**params)\n  elif spec ==\"coreclr\":\n   return clr_loader.get_coreclr(**params)\n  else :\n   raise RuntimeError(f\"Invalid runtime name: '{spec}'\")\n except Exception as exc:\n  if was_default:\n   raise RuntimeError(\n   f\"\"\"Failed to create a default .NET runtime, which would\n                    have been \"{spec}\" on this system. Either install a\n                    compatible runtime or configure it explicitly via\n                    `set_runtime` or the `PYTHONNET_*` environment variables\n                    (see set_runtime_from_env).\"\"\"\n   )from exc\n  else :\n   raise RuntimeError(\n   f\"\"\"Failed to create a .NET runtime ({spec}) using the\n                parameters {params}.\"\"\"\n   )from exc\n   \n   \ndef set_runtime_from_env()->None :\n ''\n\n\n\n\n\n\n\n\n\n\n\n\n \n from os import environ\n \n spec=environ.get(\"PYTHONNET_RUNTIME\",\"default\")\n runtime=_create_runtime_from_spec(spec)\n set_runtime(runtime)\n \n \ndef load(runtime:Union[clr_loader.Runtime,str,None ]=None ,**params:str)->None :\n ''\n\n\n\n \n global _LOADED,_LOADER_ASSEMBLY\n \n if _LOADED:\n  return\n  \n if _RUNTIME is None :\n  if runtime is None :\n   set_runtime_from_env()\n  else :\n   set_runtime(runtime,**params)\n   \n if _RUNTIME is None :\n  raise RuntimeError(\"No valid runtime selected\")\n  \n dll_path=Path(__file__).parent /\"runtime\"/\"Python.Runtime.dll\"\n \n _LOADER_ASSEMBLY=assembly=_RUNTIME.get_assembly(str(dll_path))\n func=assembly.get_function(\"Python.Runtime.Loader.Initialize\")\n \n if func(b\"\")!=0:\n  raise RuntimeError(\"Failed to initialize Python.Runtime.dll\")\n  \n import atexit\n \n atexit.register(unload)\n \n \ndef unload()->None :\n ''\n \n global _RUNTIME,_LOADER_ASSEMBLY\n if _LOADER_ASSEMBLY is not None :\n  func=_LOADER_ASSEMBLY.get_function(\"Python.Runtime.Loader.Shutdown\")\n  if func(b\"full_shutdown\")!=0:\n   raise RuntimeError(\"Failed to call Python.NET shutdown\")\n   \n  _LOADER_ASSEMBLY=None\n  \n if _RUNTIME is not None :\n  _RUNTIME.shutdown()\n  _RUNTIME=None\n", ["atexit", "clr_loader", "os", "pathlib", "sys", "typing"], 1]}
__BRYTHON__.update_VFS(scripts)
